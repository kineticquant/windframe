// loading components
fetch('/components.json')
  .then(response => response.json())
  .then(data => renderSidebar(data));

function renderSidebar(components) {
  const sidebar = document.getElementById('components-list');
  components.forEach(component => {
    const componentElem = document.createElement('div');
    componentElem.innerHTML = component.preview;
    componentElem.className = 'p-2 border rounded my-2 bg-white cursor-pointer';
    componentElem.draggable = true;
    componentElem.ondragstart = (ev) => drag(ev, component.html);
    sidebar.appendChild(componentElem);
  });
}
// allowing drop
function allowDrop(event) {
  event.preventDefault();
}

// drag from sidebar
function drag(event, componentHtml) {
  event.dataTransfer.setData("text/html", componentHtml);
}

// drop to canvas
function drop(event) {
  event.preventDefault();

  const componentHtml = event.dataTransfer.getData("text/html");
  const crtComponent = document.createElement("div");
  crtComponent.innerHTML = componentHtml;

  // styling
  crtComponent.style.position = "absolute";
  crtComponent.style.left = `${event.clientX - event.target.offsetLeft}px`;
  crtComponent.style.top = `${event.clientY - event.target.offsetTop}px`;
  crtComponent.setAttribute("draggable", "true");

  // repositioning
  crtComponent.addEventListener("dragstart", dragMoveStart);
  crtComponent.addEventListener("dragend", dragMoveEnd);

  document.getElementById("canvas").appendChild(crtComponent);
}

function dragMoveStart(event) {
  // track initial position
  event.dataTransfer.setData("text/plain", null); //for Firefox
  event.target.classList.add("dragging");
  event.dataTransfer.effectAllowed = "move";
  this.offsetX = event.clientX - event.target.offsetLeft;
  this.offsetY = event.clientY - event.target.offsetTop;
}

// moving element on Canvas
function dragMoveEnd(event) {
  event.preventDefault();
  
  // updating position
  event.target.style.left = `${event.clientX - this.offsetX}px`;
  event.target.style.top = `${event.clientY - this.offsetY}px`;
  event.target.classList.remove("dragging");
}

function exportHTML() {
  const canvasContent = document.getElementById("canvas").innerHTML;

  // full html structure with tailwind css
  // must include the cdn for tailwind otherwise it will just generate as generic html
  const htmlStruct = `
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>windframe - autogenerated tailwind UI</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  </head>
  <body>
    ${canvasContent}
  </body>
  </html>
  `;

  const blob = new Blob([htmlStruct], { type: "text/html" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "page.html";
  link.click();
}
